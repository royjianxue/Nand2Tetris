// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // The ALU
    ALU(x=outD, y=outAM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=outALU, zr=zr, ng=ng);


    // Registers
    
    ARegister(in=inA, load=loadA, out=outA, out[0..14]=addressM);
    DRegister(in=outALU, load=loadD, out=outD);
    PC(in=outA, load=loadPC, inc=true, reset=reset, out[0..14]=pc);
    // Muxes
    Mux16(a=outALU, b=instruction, sel=instA, out=inA);
    Mux16(a=outA, b=inM, sel=AMtoALU, out=outAM);
    
    // Decoder

        //instA logic
        Not(in=instruction[15], out=instA);
        //loadA logic
        And(a=instC, b=instruction[5], out=destA);
        Or(a=instA, b=destA, out=loadA);

        // loadD logic
        And(a=instruction[15], b=instruction[4], out=loadD);
        // inc logic (true -> true) on gate
        
        // loadPC logic
            // if instruction is C-inst
            Not(in=instA, out=instC);
            // JGT condition
            // postive output
                Or(a=zr, b=ng, out=state1);
                Not(in=state1, out=pos);
            And(a=instruction[0], b=pos, out=JGT);

            // JEQ condition
            // zero output
            And(a=instruction[1], b=zr, out=JEQ);

            // JLT condition
            // negative output
            And(a=instruction[2], b=ng, out=JLT);

            // JGE condition
            Or(a=JGT, b=JEQ, out=JGE);

            // JNE condition
            And(a=JGT, b=JLT, out=JNE);

            //JLE condition
            Or(a=JGE, b=JLT, out=JLE);

            // JMP condition
            Or(a=JGT, b=JLE, out=JMP);

            // aggregate conditions to PC using Nested Or structure
            Or(a=JGT, b=JEQ, out=J1);
            Or(a=J1, b=JGE, out=J2);
            Or(a=J2, b=JLT, out=J3);
            Or(a=J3, b=JNE, out=J4);
            Or(a=J4, b=JLE, out=J5);
            Or(a=J5, b=JMP, out=J6);

            And(a=instC, b=J6, out=loadPC);
            // instA is on gate

            //AMtoALU logic
            And(a=instruction[12], b=instC, out=AMtoALU);
            
            //loadM logic

            And(a=instruction[3], b=instC, out=loadM, out=writeM);


}